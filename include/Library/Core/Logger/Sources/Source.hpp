////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project        Open Space Toolkit ▸ Core
/// @file           Library/Core/Logger/Sources/Source.hpp
/// @author         Lucas Brémond <lucas@loftorbital.com>
/// @license        Apache License 2.0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __OpenSpaceToolkit_Core_Logger_Sources_Source__
#define __OpenSpaceToolkit_Core_Logger_Sources_Source__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Library/Core/Types/Unique.hpp>
#include <Library/Core/Types/String.hpp>
#include <Library/Core/Containers/Array.hpp>
#include <Library/Core/Logger/Severity.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace ostk
{
namespace core
{
namespace logger
{
namespace sources
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using ostk::core::types::Unique ;
using ostk::core::types::String ;
using ostk::core::ctnr::Array ;
using ostk::core::logger::Severity ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @brief                      Log source base

class Source
{

    friend class Pump ;

    public:

                                Source                                      (   const   String&                     aChannel                                    ) ;

                                Source                                      (   const   Source&                     aSource                                     ) ;

                                ~Source                                     ( ) ;

        virtual Source*         clone                                       ( ) const ;

        Source&                 operator =                                  (   const   Source&                     aSource                                     ) = default ;

        void*                   accessLogger                                ( ) ;

    private:

        class Impl ;

        Unique<Source::Impl>    implPtr_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
