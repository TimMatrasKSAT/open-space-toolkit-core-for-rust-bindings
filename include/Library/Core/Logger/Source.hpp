////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project        Open Space Toolkit ▸ Core
/// @file           Library/Core/Logger/Source.hpp
/// @author         Lucas Brémond <lucas@loftorbital.com>
/// @license        Apache License 2.0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __OpenSpaceToolkit_Core_Logger_Source__
#define __OpenSpaceToolkit_Core_Logger_Source__

#include <Library/Core/Types/Unique.hpp>
#include <Library/Core/Types/String.hpp>
#include <Library/Core/Logger/Sources/Source.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace library
{
namespace core
{
namespace logger
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using library::core::types::Unique ;
using library::core::types::String ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @brief                      Log source

class Source
{

    public:

                                Source                                      (   const   String&                     aChannel                                    ) ;

                                Source                                      (   const   Source&                     aSource                                     ) ;

        Source&                 operator =                                  (   const   Source&                     aSource                                     ) ;

        bool                    isDefined                                   ( ) const ;

        static Source           Undefined                                   ( ) ;

    // private:

        Unique<sources::Source> sourceUPtr_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
